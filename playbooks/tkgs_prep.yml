---
-   name: Deploy VC and Hosts
    hosts: localhost
    gather_facts: False   

    tasks:
    # -   name: Gather info about tag categories
    #     community.vmware.vmware_category_info:
    #         hostname: "{{ nested_vcenter.ip }}"
    #         username: "{{ nested_vcenter.user }}"
    #         password: "{{ nested_vcenter.password }}"
    #         validate_certs: false
    #     delegate_to: localhost
    #     register: all_tag_category_info

    # -   debug: msg="{{all_tag_category_info}}"

    # -   name: Create a storage tag category
    #     vmware_category:
    #         hostname: "{{ nested_vcenter.ip }}"
    #         username: "{{ nested_vcenter.user }}"
    #         password: "{{ nested_vcenter.password }}"
    #         validate_certs: false
    #         category_name: "{{ tkgs.datastore_tag_category }}"
    #         # category_description: Sample Description
    #         category_cardinality: 'single'
    #         associable_object_types:
    #             - Datastore
    #         state: present
    #     delegate_to: localhost
    #     register: tag_category_result

    # -   debug: msg="{{tag_category_result}}"

    # -   name: Create datastore a tag
    #     vmware_tag:
    #         hostname: "{{ nested_vcenter.ip }}"
    #         username: "{{ nested_vcenter.user }}"
    #         password: "{{ nested_vcenter.password }}"
    #         validate_certs: false
    #         category_id: "{{tag_category_result.category_results.category_id}}"
    #         tag_name: "{{ tkgs.datastore_tag }}"
    #         tag_description: "Tag for datastores used by K8s"
    #         state: present
    #     delegate_to: localhost
    #     register: tag_result

    # -   debug: msg="{{tag_result}}"

    # -   name: Add tags to a datastore
    #     vmware_tag_manager:
    #         hostname: "{{ nested_vcenter.ip }}"
    #         username: "{{ nested_vcenter.user }}"
    #         password: "{{ nested_vcenter.password }}"
    #         validate_certs: false
    #         tag_names:
    #         - "{{ tkgs.datastore_tag }}"
    #         object_name: "{{tkgs.datastore_to_tag}}"
    #         object_type: Datastore
    #         state: add
    #     delegate_to: localhost

    # -   name: Create or update a vSphere tag-based storage policy
    #     community.vmware.vmware_vm_storage_policy:
    #         hostname: "{{ nested_vcenter.ip }}"
    #         username: "{{ nested_vcenter.user }}"
    #         password: "{{ nested_vcenter.password }}"
    #         validate_certs: false
    #         name: "tkgs-storage-policy"
    #         description: "TKGSstorage performance policy"
    #         tag_category: "{{ tkgs.datastore_tag_category }}"
    #         tag_name: "{{ tkgs.datastore_tag }}"
    #         tag_affinity: true
    #         state: "present"
    #     delegate_to: localhost

    -   name: Deploy VYoS
        vmware_deploy_ovf:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}" 
            password: "{{ nested_vcenter.password }}" 
            validate_certs: no
            name: "vyos"
            datacenter: "{{ nested_vcenter.datacenter }}"
            # folder: /SG1/vm
            cluster: "{{ vyos.cluster }}"
            datastore: "{{ vyos.datastore }}"
            disk_provisioning: "{{ disk_mode }}"
            networks:  
                public: "{{ vyos.uplink_port_group }}"
                internal: "{{ vyos.internal_port_group }}"
            ova: "../dump/vyos-1.1.8-amd64.ova" 
            allow_duplicates: no
            power_on: yes
            fail_on_spec_warnings: yes
            wait: yes
            wait_for_ip_address: yes
            inject_ovf_env: no

    -   name: Deploy HA Proxy
        vmware_deploy_ovf:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}" 
            password: "{{ nested_vcenter.password }}" 
            validate_certs: no
            name: "haproxy"
            datacenter: "{{ nested_vcenter.datacenter }}"
            # folder: /SG1/vm
            cluster: "{{ haproxy.cluster }}"
            datastore: "{{ haproxy.datastore }}"
            disk_provisioning: "{{ disk_mode }}"
            networks:  
                Management: "{{ haproxy.management_port_group }}"
                Workload: "{{ haproxy.workload_port_group }}"
                Frontend: "{{ haproxy.workload_port_group }}"
            ova: "../dump/vmware-haproxy-v0.1.8.ova" 
            allow_duplicates: no
            power_on: yes
            fail_on_spec_warnings: yes
            wait: yes
            wait_for_ip_address: yes
            inject_ovf_env: yes
            properties:
                appliance.root_pwd: "{{ haproxy.root_pwd }}"
                network.nameservers: "{{ haproxy.nameservers }} "
                network.management_ip: "{{ haproxy.management_ip }}"
                network.management_gateway: "{{ haproxy.management_gateway }}"
                network.workload_ip: "{{ haproxy.workload_ip }}"
                network.workload_gateway: "{{ haproxy.workload_gateway }}"
                loadbalance.service_ip_range: "{{ haproxy.service_ip_range }}"
                loadbalance.haproxy_user: "{{ haproxy.haproxy_user }}"
                loadbalance.haproxy_pwd:  "{{ haproxy.haproxy_pwd }}"

    -   name: Set VLAN to Management portgroup
        vmware_vm_shell:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}" 
            password: "{{ nested_vcenter.password }}" 
            datacenter: "{{ nested_vcenter.datacenter }}"
            validate_certs: false
            vm_id: "vyos"
            vm_username: "vyos"
            vm_password: "vyos"
            vm_shell: /bin/vbash
            vm_shell_args: |-
                -c "source /opt/vyatta/etc/functions/script-template
                configure
                delete interfaces ethernet eth0 address dhcp
                set interfaces ethernet eth0 address '192.168.0.170/22'
                set interfaces ethernet eth1 address '172.31.0.1/24'
                set service ssh port '22'
                set protocols static route 0.0.0.0/0 next-hop 192.168.0.1 distance '1'

                set nat source rule 100 outbound-interface 'eth0'
                set nat source rule 100 source address '172.31.0.0/24'
                set nat source rule 100 translation address masquerade

                commit
                save"
            vm_shell_cwd: "/home/vyos"
        register: results
    
    -   debug: msg="{{results}}"

    # -   name: configure the remote device
    #     vyos.vyos.vyos_config:
    #         provider:
    #             host: 
    #             port: 22
    #             username:
    #             password:
                
                
    #         lines:
    #         # - set system host-name {{ inventory_hostname }}
    #         - set service lldp
    #         - set interfaces ethernet eth0 address '192.168.0.170/22'
    #         - set interfaces ethernet eth1 address '172.31.0.1/24'